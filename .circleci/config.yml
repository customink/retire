---
# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Snippets
#
# Reusable snippets are defined below this section. These are yaml fragments that can injected into the standard
# CircleCI configuration, reducing the complexity of the entire block.
# ---------------------------------------------------------------------------------------------------------------------
deploy_docker_image: &deploy_docker_image
  image: 916869144969.dkr.ecr.us-east-1.amazonaws.com/customink/ktool:v14

docker_image: &docker_ruby_image
  image: ruby:2.7
  user: root

elasticsearch_docker_image: &elasticsearch_docker_image
  image: elasticsearch:1.7.2
  environment:
    - discovery.type=single-node
    - xpack.security.enabled=false
  ports:
    - 9200:9200

# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Commands Configuration
#
# Commands are re-usable steps that can be shared across jobs. For example the installation of gems using bundler or
# waiting on a database connection. By defining them inside the commands section, they can be invoked as any standard
# command on the system, but will already be preconfigured. This allows us to keep the jobs definition small and clean
# ---------------------------------------------------------------------------------------------------------------------
version: 2.1
commands:
  install_system_dependencies:
    description: 'Installs the required system packages to be able to compile our gems'
    steps:
      - run:
          name: Install system dependencies
          command: |
            apt-get update
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -

  bundle_install:
    description: 'Performs the bundler installation, relying on the CircleCI cache for performance'
    steps:
      - restore_cache:
          keys:
            - bundler-cache-v4.1-{{ checksum "Gemfile.lock" }}
      - run:
          name: 'Bundle Install'
          command: |
            bundle config --local deployment 'true'
            bundle config --local path vendor/bundle
            bundle install
      - save_cache:
          paths:
            - vendor/bundle
          key: bundler-cache-v4.1-{{ checksum "Gemfile.lock" }}


# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Job Configuration
#
# This section defines all the available jobs that can be executed inside a Workflow.
# Think of a Job as a batch of tasks that need to be performed to setup the environment
# and perform a specific task such as running RSpec.
# ---------------------------------------------------------------------------------------------------------------------
jobs:
  setup:
    docker:
      - <<: *docker_ruby_image
        environment:
          # instead of the test name, which in some cases ends up with filename
          # too long for the filesystem.
          TESTOPTS: '--report-name=sha1'
    steps:
      - checkout
      - install_system_dependencies
      - bundle_install

  unit_tests:
    docker:
      - <<: *docker_ruby_image
        environment:
          # This is for minitest-ci to use sha1 as filename for results
          # instead of the test name, which in some cases ends up with filename
          # too long for the filesystem.
          TESTOPTS: '--report-name=sha1'
      - <<: *elasticsearch_docker_image
    parallelism: 3
    resource_class: large
    steps:
      - checkout
      - install_system_dependencies
      - run:
          name: Unit tests
          command: |
            UNIT_RUNNERS=${CIRCLE_NODE_TOTAL} \
            bundle exec rake test:unit
      - store_test_results:
          path: /tmp/reports

# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Workflow Execution Order
#
# Here we define the Workflow, the order of the various jobs and their dependencies.
# This allows us to decide whether to run certain tasks sequentially or run several of them in parallel.
# ---------------------------------------------------------------------------------------------------------------------
workflows:
  version: 2.1
  rails-frontend:
    jobs:
      - setup:
          context: customink
      - unit_tests:
          context: customink
          requires:
            - setup